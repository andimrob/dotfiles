#!/bin/bash

# git-stage - Interactive git add using gum
# Usage: git stage

set -e

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Check if gum is available
if ! command -v gum >/dev/null 2>&1; then
    echo "Error: gum is not installed"
    echo "Install with: brew install gum"
    exit 1
fi

main() {
    echo "ðŸŽ¯ Interactive Git Staging"
    echo
    
    # Get modified files and store in a temp file
    temp_files=$(mktemp)
    git status --porcelain > "$temp_files"
    
    if [[ ! -s "$temp_files" ]]; then
        echo "No modified files to stage"
        rm "$temp_files"
        return 0
    fi
    
    echo "Modified files:"
    if command -v bat >/dev/null 2>&1; then
        cat "$temp_files" | bat --style=plain --color=always --language=diff | sed 's/^/  /'
    else
        cat "$temp_files" | sed 's/^/  /'
    fi
    echo
    
    # Interactive file selection
    echo "Use â†‘/â†“ to navigate, Space to select, Enter to confirm"
    
    # Use gum choose with files from temp file
    temp_selected=$(mktemp)
    cat "$temp_files" | gum choose \
        --no-limit \
        --header="Select files to stage:" > "$temp_selected" || {
        echo "Selection cancelled"
        rm "$temp_files" "$temp_selected"
        exit 0
    }
    
    if [[ ! -s "$temp_selected" ]]; then
        echo "No files selected"
        rm "$temp_files" "$temp_selected"
        return 0
    fi
    
    # Show selection and confirm
    echo
    echo "Files to stage:"
    if command -v bat >/dev/null 2>&1; then
        cat "$temp_selected" | bat --style=plain --color=always --language=diff | sed 's/^/  /'
    else
        cat "$temp_selected" | sed 's/^/  /'
    fi
    echo
    
    if gum confirm --default=true "Stage these files?"; then
        echo
        echo "Staging files..."
        
        # Stage each selected file
        while IFS= read -r file_line; do
            # Extract filename - skip status characters and any whitespace
            filename=$(echo "$file_line" | sed 's/^..[[:space:]]*//')
            
            # Validate filename is not empty
            if [[ -z "$filename" ]]; then
                echo "âœ— Empty filename from: '$file_line'"
                continue
            fi
            
            # Stage the file
            if git add "$filename" 2>/dev/null; then
                echo "âœ“ Staged $filename"
            else
                echo "âœ— Failed to stage $filename"
                # Show the actual error for debugging
                git add "$filename" 2>&1 | sed 's/^/  Error: /'
            fi
        done < "$temp_selected"
        
        echo
        echo "âœ“ Staging complete"
    else
        echo "Staging cancelled"
    fi
    
    # Cleanup
    rm "$temp_files" "$temp_selected"
}

# Run main function
main "$@"